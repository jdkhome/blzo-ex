<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jdkhome.blzo.ex.authj.generator.dao.LogMapper">
  <resultMap id="BaseResultMap" type="com.jdkhome.blzo.ex.authj.generator.model.Log">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="organizeId" jdbcType="INTEGER" property="organizeid" />
    <result column="admin_id" jdbcType="INTEGER" property="adminId" />
    <result column="admin_name" jdbcType="VARCHAR" property="adminName" />
    <result column="authj_uri" jdbcType="VARCHAR" property="authjUri" />
    <result column="authj_name" jdbcType="VARCHAR" property="authjName" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.jdkhome.blzo.ex.authj.generator.model.Log">
    <result column="paramers" jdbcType="LONGVARCHAR" property="paramers" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, organizeId, admin_id, admin_name, authj_uri, authj_name, ip, create_time
  </sql>
  <sql id="Blob_Column_List">
    paramers
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.jdkhome.blzo.ex.authj.generator.model.LogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from logs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.jdkhome.blzo.ex.authj.generator.model.LogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from logs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from logs
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from logs
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jdkhome.blzo.ex.authj.generator.model.LogExample">
    delete from logs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jdkhome.blzo.ex.authj.generator.model.Log">
    insert into logs (id, organizeId, admin_id, 
      admin_name, authj_uri, authj_name, 
      ip, create_time, paramers
      )
    values (#{id,jdbcType=INTEGER}, #{organizeid,jdbcType=INTEGER}, #{adminId,jdbcType=INTEGER}, 
      #{adminName,jdbcType=VARCHAR}, #{authjUri,jdbcType=VARCHAR}, #{authjName,jdbcType=VARCHAR}, 
      #{ip,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{paramers,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jdkhome.blzo.ex.authj.generator.model.Log">
    insert into logs
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="organizeid != null">
        organizeId,
      </if>
      <if test="adminId != null">
        admin_id,
      </if>
      <if test="adminName != null">
        admin_name,
      </if>
      <if test="authjUri != null">
        authj_uri,
      </if>
      <if test="authjName != null">
        authj_name,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="paramers != null">
        paramers,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="organizeid != null">
        #{organizeid,jdbcType=INTEGER},
      </if>
      <if test="adminId != null">
        #{adminId,jdbcType=INTEGER},
      </if>
      <if test="adminName != null">
        #{adminName,jdbcType=VARCHAR},
      </if>
      <if test="authjUri != null">
        #{authjUri,jdbcType=VARCHAR},
      </if>
      <if test="authjName != null">
        #{authjName,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paramers != null">
        #{paramers,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jdkhome.blzo.ex.authj.generator.model.LogExample" resultType="java.lang.Long">
    select count(*) from logs
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update logs
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.organizeid != null">
        organizeId = #{record.organizeid,jdbcType=INTEGER},
      </if>
      <if test="record.adminId != null">
        admin_id = #{record.adminId,jdbcType=INTEGER},
      </if>
      <if test="record.adminName != null">
        admin_name = #{record.adminName,jdbcType=VARCHAR},
      </if>
      <if test="record.authjUri != null">
        authj_uri = #{record.authjUri,jdbcType=VARCHAR},
      </if>
      <if test="record.authjName != null">
        authj_name = #{record.authjName,jdbcType=VARCHAR},
      </if>
      <if test="record.ip != null">
        ip = #{record.ip,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.paramers != null">
        paramers = #{record.paramers,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update logs
    set id = #{record.id,jdbcType=INTEGER},
      organizeId = #{record.organizeid,jdbcType=INTEGER},
      admin_id = #{record.adminId,jdbcType=INTEGER},
      admin_name = #{record.adminName,jdbcType=VARCHAR},
      authj_uri = #{record.authjUri,jdbcType=VARCHAR},
      authj_name = #{record.authjName,jdbcType=VARCHAR},
      ip = #{record.ip,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      paramers = #{record.paramers,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update logs
    set id = #{record.id,jdbcType=INTEGER},
      organizeId = #{record.organizeid,jdbcType=INTEGER},
      admin_id = #{record.adminId,jdbcType=INTEGER},
      admin_name = #{record.adminName,jdbcType=VARCHAR},
      authj_uri = #{record.authjUri,jdbcType=VARCHAR},
      authj_name = #{record.authjName,jdbcType=VARCHAR},
      ip = #{record.ip,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jdkhome.blzo.ex.authj.generator.model.Log">
    update logs
    <set>
      <if test="organizeid != null">
        organizeId = #{organizeid,jdbcType=INTEGER},
      </if>
      <if test="adminId != null">
        admin_id = #{adminId,jdbcType=INTEGER},
      </if>
      <if test="adminName != null">
        admin_name = #{adminName,jdbcType=VARCHAR},
      </if>
      <if test="authjUri != null">
        authj_uri = #{authjUri,jdbcType=VARCHAR},
      </if>
      <if test="authjName != null">
        authj_name = #{authjName,jdbcType=VARCHAR},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paramers != null">
        paramers = #{paramers,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.jdkhome.blzo.ex.authj.generator.model.Log">
    update logs
    set organizeId = #{organizeid,jdbcType=INTEGER},
      admin_id = #{adminId,jdbcType=INTEGER},
      admin_name = #{adminName,jdbcType=VARCHAR},
      authj_uri = #{authjUri,jdbcType=VARCHAR},
      authj_name = #{authjName,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      paramers = #{paramers,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jdkhome.blzo.ex.authj.generator.model.Log">
    update logs
    set organizeId = #{organizeid,jdbcType=INTEGER},
      admin_id = #{adminId,jdbcType=INTEGER},
      admin_name = #{adminName,jdbcType=VARCHAR},
      authj_uri = #{authjUri,jdbcType=VARCHAR},
      authj_name = #{authjName,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>