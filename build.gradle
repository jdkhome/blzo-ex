buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenLocal()
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}



allprojects {
    apply plugin: "java"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'application'


    apply plugin: 'maven-publish'  // maven 发布插件
    apply plugin: 'signing'  // 签名插件


    version '0.1.2.RELEASE'
    group 'com.jdkhome.blzo'

    sourceCompatibility = 1.8
    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        [compileJava]*.options*.encoding = 'UTF-8'
    }
    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        [compileTestJava]*.options*.encoding = 'UTF-8'
    }


    dependencies {
        // =========== Spring基础 =========== //

        // web 起步依赖
        compile('org.springframework.boot:spring-boot-starter-web')
        // validation
        compile('org.springframework.boot:spring-boot-starter-validation')
        // aop
        compile('org.springframework.boot:spring-boot-starter-aop')
        // 解决springboot注入配置属性报错
        compile('org.springframework.boot:spring-boot-configuration-processor')

        // =========== 数据服务 ===========
        // redis
        compile('org.springframework.boot:spring-boot-starter-data-redis')

        // 德鲁伊连接池
        compile group: 'com.alibaba', name: 'druid', version: '1.1.10'
        // https://mvnrepository.com/artifact/mysql/mysql-connector-java
        compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'
        // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
        compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.2'
        // 分页
        compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.5'

        // =========== 工具 ==============
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
        // http client
        compile 'com.github.kevinsawicki:http-request:6.0'
        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

        compile 'commons-codec:commons-codec:1.9'

        // ==== 其他 ====
        // ip获取城市
        compile group: 'org.lionsoul', name: 'ip2region', version: '1.7'

        // 自动get set
        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        annotationProcessor("org.projectlombok:lombok:1.18.2")
        compileOnly("org.projectlombok:lombok:1.18.2")

        // =========== 测试 ============== //
        // 测试依赖
        // https://mvnrepository.com/artifact/org.mockito/mockito-all
        testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
        testCompile('org.springframework.boot:spring-boot-starter-test')

    }

    repositories {
        repositories {
            mavenLocal()
            maven {
                url "http://maven.aliyun.com/nexus/content/groups/public/"
            }
            mavenCentral()
        }
    }

    //这里一定得要。在多模块下，不然编译失败，因为不会把信赖模块给打包。
    jar {
        enabled = true
    }

// 后面的都是打包的配置
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }
// 生成 javadoc jar
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
// javadoc 配置，这里是自定义了 java doc 的一些配置
    javadoc {
        description = project.name

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.version = true
        options.header = project.name
        options.addStringOption('Xdoclint:none', '-quiet')

        // suppress warnings due to cross-module @see and @link references;
        // note that global 'api' task does display all warnings.
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
        options.encoding = "UTF-8"  //编码一定要配置否则直接出错
        options.charSet = 'UTF-8'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version "${version}"
                from components.java
                artifact sourcesJar
                artifact javadocJar

                // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
                pom {
                    name = project.name
                    description = project.name
                    url = "https://github.com/jdkhome/blzo-ex/tree/master/" + project.name
                    licenses {
                        license {
                            name = "The Apache License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = "jdkhome"
                            name = "linkji"
                            email = "main@jdkhome.com"
                        }
                    }
                    scm {
                        connection = "scm:git:https://github.com/jdkhome/blzo-ex.git"
                        developerConnection = "scm:git:https://github.com/jdkhome/blzo-ex.git"
                        url = "https://github.com/jdkhome/blzo-ex"
                    }
                }
            }
        }
        repositories {
            maven {
                name 'sonatypeRepository'
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = "${NEXUS_USERNAME}"
                    password = "${NEXUS_PASSWORD}"
                }
            }
            maven {
                name = 'sonatypeSnapshotRepository'
                url = 'https://oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    username = "${NEXUS_USERNAME}"
                    password = "${NEXUS_PASSWORD}"
                }
            }
        }
    }

// 签名配置，注意这里的顺序，今天第一次知道 gradle 中的 task 等配置也是有顺序的
// 必须在 publishing 配置之后
    signing {
        sign publishing.publications.mavenJava
    }

    /* bootJar {
         classifier = 'app'
     }*/
}